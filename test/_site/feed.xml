<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://0.0.0.0/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0/" rel="alternate" type="text/html" /><updated>2020-07-27T01:37:46-05:00</updated><id>http://0.0.0.0/feed.xml</id><title type="html">My porfolio blog</title><subtitle>Happy Learning. 개발자 포트폴리오 및 공부 블로그</subtitle><author><name>DAVID S. KIM</name></author><entry><title type="html">Jupyter Notebook Extensions 주피터 노트북 확장 프로그램 사용하기</title><link href="http://0.0.0.0/jupyter/jupyter-notebook-extensions/" rel="alternate" type="text/html" title="Jupyter Notebook Extensions 주피터 노트북 확장 프로그램 사용하기" /><published>2020-07-26T00:00:00-05:00</published><updated>2020-07-26T09:00:00-05:00</updated><id>http://0.0.0.0/jupyter/jupyter-notebook-extensions</id><content type="html" xml:base="http://0.0.0.0/jupyter/jupyter-notebook-extensions/">&lt;p&gt;Jupyter Notebook을 사용하면서 유용하고 많이 사용하실 만한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Variable Inspector&lt;/code&gt;나 ‘Table of Contents’같은 확장 프로그램들에 대하여 소개하고자 합니다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;install-jupyter_contrib_nbextensions-확장-프로그램-설치하기&quot;&gt;Install jupyter_contrib_nbextensions 확장 프로그램 설치하기&lt;/h1&gt;
&lt;h2 id=&quot;pip로-설치하실-경우&quot;&gt;pip로 설치하실 경우&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install jupyter_contrib_nbextensions    # 라이브러리 설치
jupyter contrib nbextension install --user  # jupyter notebook에서 사용할 수 있도록 등록
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;conda로-설치하실-경우&quot;&gt;conda로 설치하실 경우&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda install -c conda-forge jupyter_contrib_nbextensions   # conda-forge가 제공하는 extension설치
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;use-extensions&quot;&gt;Use extensions&lt;/h1&gt;
&lt;p&gt;만약 주피터 노트북이 실행되고 있다면 창을 모두 닫은 뒤에 다시 실행시킵니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 후, &lt;a href=&quot;http://localhost:8888/nbextensions&quot;&gt;nbextensions&lt;/a&gt; 메뉴로 갑니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:8888/nbextensions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;정상 설치후 위의 링크로 가면 다음과 같은 웹페이지가 보입니다. 필요하신 확장 프로그램을 선택하고 enable을 누르면 적용이 됩니다.
만약 제일 상단에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disable configuration for nbextensions&lt;/code&gt;메뉴에 체크박스가 체크 되어있다면 언체크하신 후에, 원하시는 확장 프로그램을 선택하시면 됩니다.
&lt;img src=&quot;/assets/images/jupyter-extensions.png&quot; alt=&quot;jupyter extensions&quot; /&gt;&lt;/p&gt;</content><author><name>DAVID S. KIM</name></author><category term="jupyter" /><category term="주피터 노트북" /><category term="확장 프로그램" /><category term="extension" /><summary type="html">Jupyter Notebook을 사용하면서 유용하고 많이 사용하실 만한 Variable Inspector나 ‘Table of Contents’같은 확장 프로그램들에 대하여 소개하고자 합니다.</summary></entry><entry><title type="html">.DS_Store 파일 제거</title><link href="http://0.0.0.0/blogging/blogging-DS_Store/" rel="alternate" type="text/html" title=".DS_Store 파일 제거" /><published>2020-07-24T00:00:00-05:00</published><updated>2020-07-23T22:00:00-05:00</updated><id>http://0.0.0.0/blogging/blogging-DS_Store</id><content type="html" xml:base="http://0.0.0.0/blogging/blogging-DS_Store/">&lt;p&gt;맥에서 블로그 업데이트 하고 commit하려고 보면 가끔 .DS_Store 파일이 존재하는데, 깃헙에 블로그 업뎃할 때는 불필요할 것 같아서 제거 하는 방법을 설명 하고자 합니다.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ds_store-정의&quot;&gt;DS_Store 정의&lt;/h1&gt;
&lt;p&gt;.DS_Store (Desktop Services Store)의 약자로 윈도우 시스템에서는 thumb.db 파일과 비슷하지만 애플 mac OS X 시스템이 폴더에 접근할 때 생기는 해당 폴더에 대한 메타데이터를 저장하는 파일을 말하고 해당 디렉토리 크기, 아이콘의 위치 및 폴더의 배경에 관련한 정보들을 얻을 수 있습니다. 보통 맥 OS에서만 생성 및 사용이 되지만, 파일 공유 과정에서 .DS_Store 파일도 함께 공유되는 경우가 있습니다. 그리고 해당 파일은 대부분 쓸모 없는 경우가 많지만 forensic 관점에서 유용하게 사용되는 정보들에는 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;spotlight comment 정보.&lt;/dt&gt;
      &lt;dd&gt;맥에서는 파일에 원하는 태그를 걸면, spotlight에서 빠르게 검색이 가능하는데 이때 구조체의 comment 영역에서 얻을 수 있습니다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;파일의 time stamp정보.&lt;/dt&gt;
      &lt;dd&gt;구조체의 modD, moDD 영역에 해당하는 부분인데, 파일의 수정 시간과 관련된 정보를 얻을 수 있습니다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;해당 디렉토리의 논리적, 물리적 크기에 대한 정보.&lt;/dt&gt;
      &lt;dd&gt;구조체의 logS, lg1S, phyS, ph1S에서 얻을 수 있습니다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;ds_store-파일-삭제-방법&quot;&gt;DS_Store 파일 삭제 방법&lt;/h1&gt;
&lt;p&gt;맥 OS에서 작업 후 GitHub Desktop을 사용하여 push하게 되면 .DS_Store 파일도 함께 push되는 경우가 있습니다. 개인적으로 필요도 없어서 삭제를 하는 편입니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Repository에서 현재 존재하는 .DS_Store파일 제거
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;.gitignore파일로 .DS_Store 라인 추가
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(base) sunwookkim@MacBook-Pro thinkreen.github.io % echo .DS_Store &amp;gt;&amp;gt; .gitignore
(base) sunwookkim@MacBook-Pro thinkreen.github.io % git add .gitignore
(base) sunwookkim@MacBook-Pro thinkreen.github.io % git commit -m '.DS_Store banished!'
[master c8fe107] .DS_Store banished!
 2 files changed, 1 insertion(+)
 create mode 100644 .gitignore
 delete mode 100644 test/_sass/.DS_Store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>DAVID S. KIM</name></author><category term="blogging" /><category term=".DS_Store" /><category term="jekyll" /><summary type="html">맥에서 블로그 업데이트 하고 commit하려고 보면 가끔 .DS_Store 파일이 존재하는데, 깃헙에 블로그 업뎃할 때는 불필요할 것 같아서 제거 하는 방법을 설명 하고자 합니다.</summary></entry><entry><title type="html">minimal-mistakes font 사이즈 변경</title><link href="http://0.0.0.0/blogging/blogging-FontSize/" rel="alternate" type="text/html" title="minimal-mistakes font 사이즈 변경" /><published>2020-07-23T00:00:00-05:00</published><updated>2020-07-22T22:00:00-05:00</updated><id>http://0.0.0.0/blogging/blogging-FontSize</id><content type="html" xml:base="http://0.0.0.0/blogging/blogging-FontSize/">&lt;p&gt;minimal-mistakes 테마로 블로그를 만들었을 때, 웹 브라우저 화면 사이즈에 따라 폰트 사이즈가 변경이 됩니다. 하지만 개인 적으로 flexible box 레이아웃을 사용하되 폰트 사이즈는 고정으로 하는 것을 더 선호합니다. 그래서 간단하게 폰트 사이즈를 globally 변경하는 방법을 확인 하겠습니다. 
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;adjusting-font-size&quot;&gt;Adjusting font size&lt;/h1&gt;
&lt;p&gt;해당 요소의 css파일에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$type-size-x&lt;/code&gt; 속성을 각각 바꿀수도 있지만 손이 많이 가는 관계로, 폰트 사이즈를 globally 변경하기 위한 쉬운 방법 두 가지에 대해 말씀드리려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;update-maincss&quot;&gt;Update main.css&lt;/h2&gt;
&lt;p&gt;_reset.scss파일이 크고 실수로 다른 부분을 수정해서 overriding하게 되는 리스크가 있습니다. 리스크를 피하고자 따로 폰트 사이즈만 오버라이딩 하도록 &lt;a href=&quot;https://github.com/thinkreen/thinkreen.github.io/blob/master/assets/css/main.scss&quot;&gt;main.scss&lt;/a&gt; 파일에 새 css를 추가하는 방법을 추천하고, 방법은 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;minimal-mistakes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;whatever&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;breakpoint($medium)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;whatever&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;whatever&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;x-large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;whatever&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/font-size-Screenshot1.png&quot; alt=&quot;font-size-Screenshot1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-_resetscss&quot;&gt;Update _reset.scss&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/thinkreen/thinkreen.github.io/blob/master/_sass/minimal-mistakes/_reset.scss&quot;&gt;_sass/minimal-mistakes/_reset.scss&lt;/a&gt;에 있는 font-size값을 원하는 값으로 수정해 줍니다. 저는 18px가 보기 좋아서 $medium/$large/$x-large 스크린 사이즈에서 모두 18로 변경하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/font-size-Screenshot2.png&quot; alt=&quot;font-size-Screenshot2&quot; /&gt;&lt;/p&gt;</content><author><name>DAVID S. KIM</name></author><category term="blogging" /><category term="minimal-mistakes" /><category term="jekyll" /><category term="폰트 사이즈" /><category term="font size" /><summary type="html">minimal-mistakes 테마로 블로그를 만들었을 때, 웹 브라우저 화면 사이즈에 따라 폰트 사이즈가 변경이 됩니다. 하지만 개인 적으로 flexible box 레이아웃을 사용하되 폰트 사이즈는 고정으로 하는 것을 더 선호합니다. 그래서 간단하게 폰트 사이즈를 globally 변경하는 방법을 확인 하겠습니다.</summary></entry><entry><title type="html">Blog 개발 환경 구축</title><link href="http://0.0.0.0/blogging/blogging-environment/" rel="alternate" type="text/html" title="Blog 개발 환경 구축" /><published>2020-07-19T00:00:00-05:00</published><updated>2020-07-18T22:00:00-05:00</updated><id>http://0.0.0.0/blogging/blogging-environment</id><content type="html" xml:base="http://0.0.0.0/blogging/blogging-environment/">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;p&gt;현재 포트폴리오 블로그를 운영하는 개발 환경에 대하여 이야기하려고 합니다.
지금 제가 사용하고 있는 thinkreen 블로그는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github.io&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;을 기반으로 하고있고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistake&lt;/code&gt; 테마를 사용하고 있습니다.
그리고 개발환경은 Git repository를 매번 clone한 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual Studio Code&lt;/code&gt;를 통해 수정 후 commit/push를 하고 있지만, 자동으로 deploy되도록 변경할 예정입니다.&lt;/p&gt;

&lt;h1 id=&quot;posting-step&quot;&gt;Posting step&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;write a draft.&lt;/li&gt;
  &lt;li&gt;Run on test server and check grammars/error.&lt;/li&gt;
  &lt;li&gt;Moving a file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory after posting.&lt;/li&gt;
  &lt;li&gt;Commit and push.&lt;/li&gt;
  &lt;li&gt;Check updated posting.&lt;/li&gt;
  &lt;li&gt;Keep updating if needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;
&lt;p&gt;아직은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal-mistake&lt;/code&gt; 테마의 구조와 일부 파일들을 그대로 가지고 있지만, 조금씩 수정을 통해 구조를 정리할 예정이고 현재 전반적인 블로구 구조입니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thinkreen.github.io
├── _data                      # 커스텀 가능한 다양한 데이터 파일 존재 data files for customizing the theme
|  ├── navigation.yml          # 네비게이션바, 사이드바 등이 정의 main navigation links
|  └── ui-text.yml             # 언어별 표시되는 단어들의 정의 text used throughout the theme's UI
├── _drafts                    # 블로그에 포스팅 되기 전 초안 밑 작업 파일들이 저장되는 곳
├── _includes                  # includes를 사용하여 가져올 수 있는 파일들. (현재 하나씩 공부중)
|  ├── analytics-providers     # snippets for analytics (Google and custom)
|  ├── comments-providers      # snippets for comments
|  ├── footer                  # custom snippets to add to site footer
|  ├── head                    # custom snippets to add to site head
|  ├── feature_row             # feature row helper
|  ├── gallery                 # image gallery helper
|  ├── group-by-array          # group by array helper for archives
|  ├── nav_list                # navigation list helper
|  ├── toc                     # table of contents helper
|  └── ...
├── _layouts                   # 사이트 전반적인 레이아웃부터 부분적인 레이아웃을 설정
|  ├── archive-taxonomy.html   # tag/category archive for Jekyll Archives plugin
|  ├── archive.html            # archive base
|  ├── categories.html         # archive listing posts grouped by category
|  ├── category.html           # archive listing posts grouped by specific category
|  ├── collection.html         # archive listing documents in a specific collection
|  ├── compress.html           # compresses HTML in pure Liquid
|  ├── default.html            # base for all other layouts
|  ├── home.html               # home page
|  ├── posts.html              # archive listing posts grouped by year
|  ├── search.html             # search page
|  ├── single.html             # single document (post/page/etc)
|  ├── tag.html                # archive listing posts grouped by specific tag
|  ├── tags.html               # archive listing posts grouped by tags
|  └── splash.html             # splash page
├── _sass                      # partial CSS 파일들 저장
├── assets                     # 메인 CSS파일 및 JS, 이미지 파일 저장
|  ├── css
|  |  └── main.scss            # main stylesheet, loads SCSS partials from _sass
|  ├── images                  # image assets for posts/pages/collections/etc.
|  ├── js
|  |  ├── plugins              # jQuery plugins
|  |  ├── vendor               # vendor scripts
|  |  ├── _main.js             # plugin settings and other scripts to load after jQuery
|  |  └── main.min.js          # optimized and concatenated script file loaded before
├── _config.yml                # site configuration
├── Gemfile                    # gem file dependencies
├── index.html                 # paginated home page showing recent posts
└── package.json               # NPM build scripts

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;jekyll-environment&quot;&gt;jekyll environment&lt;/h1&gt;
&lt;p&gt;테스트 서버 구동을 위한 jekyll 환경 설정&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler
gem install jekyll

bundle install

# Run test server
bundle exec jekyll serve --host 0.0.0.0 --port 80

# See drafts (all files in /_draft/)
bundle exec jekyll serve --host 0.0.0.0 --port 80 --draft
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>DAVID S. KIM</name></author><category term="blogging" /><category term="jekyll" /><summary type="html">Intro 현재 포트폴리오 블로그를 운영하는 개발 환경에 대하여 이야기하려고 합니다. 지금 제가 사용하고 있는 thinkreen 블로그는 Github.io 와 jekyll을 기반으로 하고있고, minimal-mistake 테마를 사용하고 있습니다. 그리고 개발환경은 Git repository를 매번 clone한 후 Visual Studio Code를 통해 수정 후 commit/push를 하고 있지만, 자동으로 deploy되도록 변경할 예정입니다.</summary></entry><entry><title type="html">Begin with TIL(Today I learned)</title><link href="http://0.0.0.0/til/TIL/" rel="alternate" type="text/html" title="Begin with TIL(Today I learned)" /><published>2020-07-10T00:00:00-05:00</published><updated>2020-07-10T09:00:00-05:00</updated><id>http://0.0.0.0/til/TIL</id><content type="html" xml:base="http://0.0.0.0/til/TIL/">&lt;p&gt;그날의 컨디션에 따라서 영어든 한국어든 TIL을 업데이트 할 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/TIL_Images/2020-07-10-TIL.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-i-did&quot;&gt;What I did&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;깃헙 계정을 만든지 삼년이 지났지만, 깃헙을 제대로 활용하지 못하고 마땅한 포트폴리오도 없어서 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;minimal-mistakes&lt;/a&gt; 템플렛을 적용한 &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; theme으로 github 블로그를 만들었다. 블로그를 만들려고 여러번 시도를 해보았지만, 막상 나의 성장과 정보 공유를 위해 뭔가를 만들어 본다는 것이 익숙하지 않았다. 최근에 미루고 미루던 machine learning을 공부하면서 알게된 markdown을 이용한 글쓰기가 상당이 재밌고 좋아서 TIL(Today I learned)를 꾸준히 이어가고 싶다.&lt;/li&gt;
  &lt;li&gt;여러 템플렛으로 만들어 보았지만, 개인적으로 minimal-mistakes가 가장 가독성이 좋았고, 정리가 잘 되어있어서 처음 시작하기에 좋은 것 같다.&lt;/li&gt;
  &lt;li&gt;기본적인 HTML/CSS/JavaScript를 알긴 하지만, 막상 그것들을 사용하여 페이지를 만들려고 하니 꽤나 힘들었다. 하지만 이번 기회에 Ruby를 포함해서 제대로 공부해봐야겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-i-learn&quot;&gt;What I learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;무언가 새로운 것을 시작할 때 완벽하게 공부하고 해야지 하면서 미루지 말고, 우선 작은 것 부터라도 시작을 하자.&lt;/li&gt;
  &lt;li&gt;머릿속으로 아는 것과 실제로 만들어 보는 것에는 차이가 상당히 있다. 학습하는 시간과 실습하는 시간을 적절히 분배하자.&lt;/li&gt;
  &lt;li&gt;영어가 모국어가 아니다 보니, 한국어로 먼저 기본 지식을 습득한 후에 영어로 깊게 파고 들어가자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-to-do&quot;&gt;What to do&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Data structure 공부 및 내용 정리/포스팅&lt;/li&gt;
  &lt;li&gt;Machine learning 포트폴리오 정리&lt;/li&gt;
&lt;/ul&gt;</content><author><name>DAVID S. KIM</name></author><category term="TIL" /><summary type="html">그날의 컨디션에 따라서 영어든 한국어든 TIL을 업데이트 할 예정이다.</summary></entry><entry><title type="html">Python 함수</title><link href="http://0.0.0.0/python/py-function/" rel="alternate" type="text/html" title="Python 함수" /><published>2020-07-01T00:00:00-05:00</published><updated>2020-07-01T09:00:00-05:00</updated><id>http://0.0.0.0/python/py-function</id><content type="html" xml:base="http://0.0.0.0/python/py-function/">&lt;h1 id=&quot;함수function&quot;&gt;함수(Function)&lt;/h1&gt;
&lt;p&gt;함수는 하나의 기능성을 가진 코드의 집합을 말합니다. 그리고 함수를 사용하는 것을 보통 &lt;strong&gt;함수를 호출한다&lt;/strong&gt;라고 표현합니다. 함수를 호출할 때 괄호( ) 내부에 &lt;strong&gt;매개변수(parameter)&lt;/strong&gt;라는 자료를 넣어 최종적으로 &lt;strong&gt;리턴값&lt;/strong&gt;이라는 결과를 부릅니다.&lt;/p&gt;

&lt;h2 id=&quot;함수의-기본-형태&quot;&gt;함수의 기본 형태&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;함수&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;이름&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;매개변수1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;매개변수2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;문장&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;예제&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;References:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduction to Computation and Programming Using Python (John Guttag / MIT)&lt;/li&gt;
    &lt;li&gt;혼자 공부하는 파이썬 (윤인성 / 한빛미디어)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>DAVID S. KIM</name></author><category term="python" /><category term="파이썬" /><category term="function" /><summary type="html">함수(Function) 함수는 하나의 기능성을 가진 코드의 집합을 말합니다. 그리고 함수를 사용하는 것을 보통 함수를 호출한다라고 표현합니다. 함수를 호출할 때 괄호( ) 내부에 매개변수(parameter)라는 자료를 넣어 최종적으로 리턴값이라는 결과를 부릅니다.</summary></entry><entry><title type="html">Python 라이브러리/패키지/모듈/함수/클래스</title><link href="http://0.0.0.0/python/py-FunctionModuleClass/" rel="alternate" type="text/html" title="Python 라이브러리/패키지/모듈/함수/클래스" /><published>2020-06-30T00:00:00-05:00</published><updated>2020-06-30T09:00:00-05:00</updated><id>http://0.0.0.0/python/py-FunctionModuleClass</id><content type="html" xml:base="http://0.0.0.0/python/py-FunctionModuleClass/">&lt;p&gt;파이썬을 처음 시작했을 때 라이브러리/패키지, 모듈, 함수/클래스 간의 개념이 머릿속에 정확하게 자리 잡히지 않아서 고생한 적이 있었습니다. 그래서 그 개념을 간략하게 설명하고 다음 포스팅에서 각각의 사용법에 대하여 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/FunctionModuleClass.png&quot; alt=&quot;FunctionModuleClass&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;라이브러리library&quot;&gt;라이브러리(Library)&lt;/h1&gt;
&lt;p&gt;라이브러리와 패키지는 둘다 다른 프로그램에서 포함하여 사용할 수 있는 일종의 &lt;strong&gt;코드 모음&lt;/strong&gt;이라고 생각하면 쉽습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러 모듈과 패키지를 묶어 라이브러리라고 합니다.&lt;/li&gt;
  &lt;li&gt;파이썬을 설치할 때 본적으로 설치되는 라이브러리를 &lt;strong&gt;표준라이브러리(Python Standard Library)&lt;/strong&gt;라고 합니다. (예: time, sys, os, math, random, urllib 등)&lt;/li&gt;
  &lt;li&gt;python.org가 아닌 외부 3rd party에서 개발한 모듈과 패키지를 묶어서 &lt;strong&gt;외부 라이브러리(Third Party Library)&lt;/strong&gt;라고 합니다. (예: requests, scrapy, webbrowser 등)&lt;/li&gt;
  &lt;li&gt;3rd party를 통해 개발된 모듈, 패키지가 표준라이브러리보다 더 우수하거나 사용하기 쉬운 경우도 있습니다. (예: Numpy, Scipy, requests)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;패키지package&quot;&gt;패키지(Package)&lt;/h1&gt;
&lt;p&gt;일반적으로 패키지와 라이브러리 사이의 경계가 조금 모호한데, 사용중인 프로그래밍 언어마다 그 정의가 조금씩 달라질 수 있습니다. 파이썬에서는 패키지는 패키지 관리자를 사용하여 설치하기 위한 &lt;strong&gt;준비된 라이브러리&lt;/strong&gt;입니다. 가끔은 라이브러리를 배포하는 &lt;strong&gt;메커니즘&lt;/strong&gt;을 말하기도 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;특정 기능과 관련된 여러 모듈들을 하나의 상위 폴더에 넣어 놓은 것을 패키지라고 합니다.&lt;/li&gt;
  &lt;li&gt;패키지 안에 여러가지 하위폴더 가 더 존재할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;파이썬 3.3이후 부터는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;가 없어도 패키지로 인식하지만, 하위 버전 호환을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; 파일을 생성하여 패키지를 표현해주는 것이 안전하다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;을 이용하여 파이썬 모듈을 계층적으로 관리할 수 있도록 하는 것을 말합니다.&lt;/li&gt;
  &lt;li&gt;A.B라고 하면 A는 패키지, B는 모듈이 됩니다. (예: sound.echo –&amp;gt; sound 패키지에 있는 echo모듈)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#참고: https://wikidocs.net/1418
#가상으로 game 패키지가 있다고 할 때의 structure 예

game/
    __init__.py
    sound/ 
        __init__.py 
        echo.py 
        wav.py 
    graphic/ 
        __init__.py
        screen.py
        render.py
    play/ 
        __init__.py
        run.py
        test.py

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;모듈module&quot;&gt;모듈(Module)&lt;/h1&gt;
&lt;p&gt;파이썬에서는 모듈의 기능을 활용하여 코드를 분리하고 공유합니다. 이때 여러 기능들(함수, 변수, 클래스 등)을 따로 구현하여 파이썬 파일(.py)을 &lt;strong&gt;모듈(module)&lt;/strong&gt;이라고 합니다. 가끔 &lt;strong&gt;script&lt;/strong&gt;라고도 부릅니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;파이썬 코드 가장 위에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;로 불러오는 것이 모듈입니다. (예: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import math&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;함수function&quot;&gt;함수(Function)&lt;/h1&gt;
&lt;p&gt;함수는 하나의 기능성을 가진 코드의 집합을 말합니다. 그리고 함수를 사용하는 것을 흔희 &lt;strong&gt;함수를 호출한다&lt;/strong&gt;라고 표현하고, 호출할 때 괄호 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;( )&lt;/code&gt;내부에 &lt;strong&gt;매개변수&lt;/strong&gt;를 넣어 최종적으로 &lt;strong&gt;리턴값&lt;/strong&gt;을 부릅니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def 함수 이름():
    문장
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;내장함수(Built-in function): 외부 모듈과는 달리 import를 하지 않습니다. (예: enumerate(), str() )
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; str(3)
  '3'
  &amp;gt;&amp;gt;&amp;gt; str('hi'.upper())
  'HI'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;외장함수: import를 통하여 불러드린 외부 모듈 안에 있는 함수를 말합니다. (예: random() )
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;gt;&amp;gt;&amp;gt; import random
  &amp;gt;&amp;gt;&amp;gt; data = [1, 2, 3, 4]
  &amp;gt;&amp;gt;&amp;gt; random.shuffle(data)
  &amp;gt;&amp;gt;&amp;gt; data
  [4, 1, 3, 2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;클래스class&quot;&gt;클래스(Class)&lt;/h1&gt;
&lt;p&gt;python을 포함한 Java, Javascript, C#, C++, C등 제가 다룰 줄 아는 언어가 많지 않지만, 이들 중에서 C언어를 제외한 모든 프로그래밍 언어는 &lt;strong&gt;클래스(class)&lt;/strong&gt;를 기반으로 &lt;strong&gt;객체(object)&lt;/strong&gt;를 만들고, 그러한 객체를 우선으로 생각해서 프로그래밍을 한다는 의미로 &lt;strong&gt;객체 지향 프로그래밍 언어(Object Oriented Programming Language)&lt;/strong&gt;라고 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;쉽게 설명한다면 클래스는 붕어빵 틀이라고 보시면 됩니다. 여기서 붕어빵 틀(클래스)를 기반으로 만들어진 객체를 붕어빵(인스턴트)라고 부릅니다.&lt;/li&gt;
  &lt;li&gt;클래스는 객체를 위한 설계도이고, 이러한 클래스를 기반으로 만들어진 객체를 인스턴스라고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위에서 간략하게 설명드린 라이브러리, 패키지, 모듈, 함수, 클래스에 대하여 다음 포스팅에서 조금 더 깊게 설명하겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;References:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduction to Computation and Programming Using Python (John Guttag / MIT)&lt;/li&gt;
    &lt;li&gt;혼자 공부하는 파이썬 (윤인성 / 한빛미디어)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>DAVID S. KIM</name></author><category term="python" /><category term="파이썬" /><category term="library" /><category term="package" /><category term="module" /><category term="function" /><category term="class" /><summary type="html">파이썬을 처음 시작했을 때 라이브러리/패키지, 모듈, 함수/클래스 간의 개념이 머릿속에 정확하게 자리 잡히지 않아서 고생한 적이 있었습니다. 그래서 그 개념을 간략하게 설명하고 다음 포스팅에서 각각의 사용법에 대하여 설명하겠습니다.</summary></entry><entry><title type="html">Markdown Cheatsheets</title><link href="http://0.0.0.0/markdown/markdown-cheatsheets/" rel="alternate" type="text/html" title="Markdown Cheatsheets" /><published>2020-06-10T00:00:00-05:00</published><updated>2020-06-09T22:00:00-05:00</updated><id>http://0.0.0.0/markdown/markdown-cheatsheets</id><content type="html" xml:base="http://0.0.0.0/markdown/markdown-cheatsheets/">&lt;h1 id=&quot;markdown-cheatsheet&quot;&gt;Markdown Cheatsheet&lt;/h1&gt;
&lt;p&gt;This is intended as a quick reference and showcase for Markdown.
For more cheatsheet, check &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Adam-P Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;shortcuts&quot;&gt;Shortcuts&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escape&lt;/code&gt; key: changes to command mode 
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escape&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;: shortcut for “save”
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escape&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;: switch to code cell
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escape&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;: switch to Markdown cell
&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift + Enter&lt;/code&gt;: run code cells&lt;/p&gt;

&lt;h2 id=&quot;headers&quot;&gt;Headers&lt;/h2&gt;
&lt;p&gt;Put 1-6 hash marks(#) at the beginning of the line&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Header 1 
## Header 2 
### Header 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;renders as
&lt;img src=&quot;/assets/images/headers.png&quot; alt=&quot;header&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;emphasis&quot;&gt;Emphasis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;For bold, wrap the text in two asterisks or underscores (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**bold** or __bold__&lt;/code&gt;) renders as &lt;strong&gt;bold&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;For italics, wrap the text in one asterisk or underscore (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*italic* or _italic_&lt;/code&gt;) renders as &lt;em&gt;italic&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;For strikethrough, wrap the text in two tildes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~~strikethrough~~&lt;/code&gt;) renders as &lt;del&gt;strikethrough&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-and-syntax-highlighting&quot;&gt;Code and Syntax Highlighting&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;code
    &lt;ul&gt;
      &lt;li&gt;start a new line and wrap the text in three backticks.&lt;/li&gt;
      &lt;li&gt;indent each line of the code block with four spaces.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Syntax Highlighting
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; `sysntax highlighting` 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;renders as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysntax highlighting&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;math-expressions&quot;&gt;Math expressions&lt;/h2&gt;

&lt;p&gt;Create math expressions in Markdown cells using LaTeX symbols.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$y = mx + b$ renders as $y = mx + b$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-images&quot;&gt;Add images&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Alt Text](Url)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/14879156?s=460&amp;amp;u=30c6440b9fb8e96506494a80cb01b1c80039f83e&amp;amp;v=4&quot; alt=&quot;My profile&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;colors&quot;&gt;Colors:&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;font color=blue|red|green|pink|yellow&amp;gt;Text&amp;lt;/font&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Not all markdown code works within a font tag, so review your colored text carefully!&lt;/p&gt;

&lt;h2 id=&quot;indented-quoting&quot;&gt;Indented quoting&lt;/h2&gt;
&lt;p&gt;Use a greater than sign (&amp;gt;) and then a space, then type the text. The text is indented and has a gray horizontal line to the left of it until the next carriage return.&lt;/p&gt;

&lt;h2 id=&quot;bullets&quot;&gt;Bullets&lt;/h2&gt;
&lt;p&gt;Use the dash sign (- ) with a space after it, or a space, a dash, and a space ( - ), to create a circular bullet. To create a sub bullet, use a tab followed a dash and a space. You can also use an asterisk instead of a dash, and it works the same.&lt;/p&gt;

&lt;h2 id=&quot;internal-links&quot;&gt;Internal links&lt;/h2&gt;
&lt;p&gt;To link to a section, use this code:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[section title](#section-title)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For the text in the parentheses, replace spaces and special characters with a hyphen. Make sure to test all the links!
Alternatively, you can add an ID for a section right above the section title. Use this code:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a id=&quot;section_ID&quot;&amp;gt;&amp;lt;/a&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make sure that the section_ID is unique within the notebook.
Use this code for the link and make sure to test all the links!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[section title](#section_ID)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;external-links&quot;&gt;External links&lt;/h2&gt;
&lt;p&gt;Use this code and test all links!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[link text](http://url)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>DAVID S. KIM</name></author><category term="jupyter notebook" /><category term="markdown" /><summary type="html">Markdown Cheatsheet This is intended as a quick reference and showcase for Markdown. For more cheatsheet, check Adam-P Markdown Cheatsheet</summary></entry><entry><title type="html">Web Crawling by Selenium</title><link href="http://0.0.0.0/machine%20learning/ml-WebCrawling/" rel="alternate" type="text/html" title="Web Crawling by Selenium" /><published>2020-05-18T00:00:00-05:00</published><updated>2020-06-30T22:00:00-05:00</updated><id>http://0.0.0.0/machine%20learning/ml-WebCrawling</id><content type="html" xml:base="http://0.0.0.0/machine%20learning/ml-WebCrawling/">&lt;h1 id=&quot;google-image-download-using-selenium&quot;&gt;Google image download using Selenium&lt;/h1&gt;
&lt;p&gt;머신 러닝 training을 위한 이미지 크롤링 라이브러리 &lt;a href=&quot;https://pypi.org/project/google_images_download/&quot;&gt;google_images_downloads&lt;/a&gt; 가 잘 실행되지 않아서 확인해 보았다.&lt;br /&gt;
2020년 2월부터 Google images DOM이 image element class=”rg_meta notranslate”에서 “rg_i Q4LuWd” 형식으로 변경되면서 더 이상 실행이 되지 않는 문제 대안으로 Selenium을 이용한 크롤링 간편화한 &lt;a href=&quot;https://pypi.org/project/gids/&quot;&gt;gids&lt;/a&gt; 패키지를 이용하는 방법을 사용하였다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def get_soup(url,header):
    return BeautifulSoup(urllib2.urlopen(urllib2.Request(url,headers=header)),'html.parser')    

def main(args):
    query = &quot;typical face&quot;
    query = query.split()
    query = '+'.join(query)
    url = &quot;https://www.google.co.in/search?q=&quot;+query+&quot;&amp;amp;source=lnms&amp;amp;tbm=isch&quot;
    headers = {}
    headers['User-Agent'] = &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36&quot;
    soup = get_soup(url, headers)
    for a in soup.find_all(&quot;img&quot;, {&quot;class&quot;: &quot;rg_i&quot;}):
        wget.download(a.attrs[&quot;data-iurl&quot;], a.attrs[&quot;data-iid&quot;])


if __name__ == '__main__':
    from sys import argv
    try:
        main(argv)
    except KeyboardInterrupt:
        pass
    sys.exit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;install-package&quot;&gt;Install Package&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install gids
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;
&lt;h2 id=&quot;example-code&quot;&gt;Example code&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gids&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'driver_path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/usr/local/bin/chromedriver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'headless'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'window-size'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'720x480'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'disable_gpu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;first_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'keyword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'White Shark'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'limit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The number of images
&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;'download_context'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'./data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'animal'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# save in ./data/animal/img_01...10
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;second_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'keyword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Whale Shark'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'limit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The number of images
&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;'download_context'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'./data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Shark'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# save in ./data/plant/img_01...10
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;downloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;downloader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    Loading Pages. This may take a few moments...
    Page Scroll done...
    Start to downloading
    Downloading ...White Shark - [./data/animal/White Shark/img_0]
    Downloading ...White Shark - [./data/animal/White Shark/img_1]
    Downloading ...White Shark - [./data/animal/White Shark/img_2]
    Downloading ...White Shark - [./data/animal/White Shark/img_3]
    Downloading ...White Shark - [./data/animal/White Shark/img_4]
    Downloading ...White Shark - [./data/animal/White Shark/img_5]
    Downloading ...White Shark - [./data/animal/White Shark/img_6]
    Downloading ...White Shark - [./data/animal/White Shark/img_7]
    Downloading ...White Shark - [./data/animal/White Shark/img_8]
    Downloading ...White Shark - [./data/animal/White Shark/img_9]
    White Shark download completed. [Successful count = 10].
    Loading Pages. This may take a few moments...
    Page Scroll done...
    Start to downloading
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_0]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_1]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_2]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_3]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_4]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_5]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_6]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_7]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_8]
    Downloading ...Whale Shark - [./data/Shark/Whale Shark/img_9]
    Whale Shark download completed. [Successful count = 10].
    Total time is 36.451616048812866 seconds.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h1&gt;
&lt;p&gt;아래와 같이 에러가 나올 때 chromedriver파일이 있는 디렉토리로 PATH를 설정해줌.&lt;/p&gt;

&lt;p&gt;No found chromedriver in this environment.
Install on your machine. exception: Message: ‘chromedriver’ executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=$PATH:/usr/local/bin/chromedriver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>DAVID S. KIM</name></author><category term="machine learning" /><category term="python" /><category term="crawling" /><summary type="html">Google image download using Selenium 머신 러닝 training을 위한 이미지 크롤링 라이브러리 google_images_downloads 가 잘 실행되지 않아서 확인해 보았다. 2020년 2월부터 Google images DOM이 image element class=”rg_meta notranslate”에서 “rg_i Q4LuWd” 형식으로 변경되면서 더 이상 실행이 되지 않는 문제 대안으로 Selenium을 이용한 크롤링 간편화한 gids 패키지를 이용하는 방법을 사용하였다.</summary></entry><entry><title type="html">Python 3. 자료형</title><link href="http://0.0.0.0/python/py-03-DataType/" rel="alternate" type="text/html" title="Python 3. 자료형" /><published>2020-02-25T00:00:00-06:00</published><updated>2020-02-25T08:00:00-06:00</updated><id>http://0.0.0.0/python/py-03-DataType</id><content type="html" xml:base="http://0.0.0.0/python/py-03-DataType/">&lt;h1 id=&quot;자료형data-type&quot;&gt;자료형(data type)&lt;/h1&gt;
&lt;p&gt;자료형이란 파이썬에서 기능과 역할에 따라 구분한 자료의 형식을 말합니다. 데이터의 자료형을 확인할 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type()&lt;/code&gt; 함수를 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;안녕하세요&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;       # 문자열
&amp;gt;&amp;gt;&amp;gt; print(type(273))
&amp;lt;class '&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;       # 정수
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;문자열-만들기&quot;&gt;문자열 만들기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;References:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduction to Computation and Programming Using Python (John Guttag / MIT)&lt;/li&gt;
    &lt;li&gt;혼자 공부하는 파이썬 (윤인성 / 한빛미디어)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>DAVID S. KIM</name></author><category term="python" /><category term="파이썬" /><category term="자료형" /><category term="data types" /><summary type="html">자료형(data type) 자료형이란 파이썬에서 기능과 역할에 따라 구분한 자료의 형식을 말합니다. 데이터의 자료형을 확인할 때는 type() 함수를 사용한다. &amp;gt;&amp;gt;&amp;gt; print(type(&quot;안녕하세요&quot;)) &amp;lt;class 'str'&amp;gt; # 문자열 &amp;gt;&amp;gt;&amp;gt; print(type(273)) &amp;lt;class 'int'&amp;gt; # 정수</summary></entry></feed>